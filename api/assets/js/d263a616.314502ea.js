"use strict";(self.webpackChunkampache_org_api=self.webpackChunkampache_org_api||[]).push([[223],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>k});var l=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,l,i=function(e,a){if(null==e)return{};var t,l,i={},n=Object.keys(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)t=n[l],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=l.createContext({}),p=function(e){var a=l.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},o=function(e){var a=p(e.components);return l.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return l.createElement(l.Fragment,{},a)}},m=l.forwardRef((function(e,a){var t=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),m=p(t),k=i,c=m["".concat(s,".").concat(k)]||m[k]||u[k]||n;return t?l.createElement(c,r(r({ref:a},o),{},{components:t})):l.createElement(c,r({ref:a},o))}));function k(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var n=t.length,r=new Array(n);r[0]=m;var d={};for(var s in a)hasOwnProperty.call(a,s)&&(d[s]=a[s]);d.originalType=e,d.mdxType="string"==typeof e?e:i,r[1]=d;for(var p=2;p<n;p++)r[p]=t[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6734:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>n,metadata:()=>d,toc:()=>p});var l=t(7462),i=(t(7294),t(3905));const n={title:"API Changelog",metaTitle:"API Changelog",description:"API Changelog"},r=void 0,d={unversionedId:"api-changelog",id:"api-changelog",title:"API Changelog",description:"API Changelog",source:"@site/docs/api-changelog.md",sourceDirName:".",slug:"/api-changelog",permalink:"/api/api-changelog",draft:!1,tags:[],version:"current",frontMatter:{title:"API Changelog",metaTitle:"API Changelog",description:"API Changelog"},sidebar:"api",previous:{title:"API Examples",permalink:"/api/api-examples"},next:{title:"Access Control Lists",permalink:"/api/api-acls"}},s={},p=[{value:"API develop",id:"api-develop",level:2},{value:"Added",id:"added",level:3},{value:"Changed",id:"changed",level:3},{value:"Removed",id:"removed",level:3},{value:"Fixed",id:"fixed",level:3},{value:"API 5.6.0",id:"api-560",level:2},{value:"Fixed",id:"fixed-1",level:3},{value:"API 5.5.6",id:"api-556",level:2},{value:"Changed",id:"changed-1",level:3},{value:"Fixed",id:"fixed-2",level:3},{value:"API 5.5.4",id:"api-554",level:2},{value:"Fixed",id:"fixed-3",level:3},{value:"API 5.5.3",id:"api-553",level:2},{value:"API 5.5.2",id:"api-552",level:2},{value:"Added",id:"added-1",level:3},{value:"Fixed",id:"fixed-4",level:3},{value:"API 5.5.1",id:"api-551",level:2},{value:"API 5.5.0",id:"api-550",level:2},{value:"Added",id:"added-2",level:3},{value:"Fixed",id:"fixed-5",level:3},{value:"API  5.4.1",id:"api--541",level:2},{value:"Added",id:"added-3",level:3},{value:"API 5.4.0",id:"api-540",level:2},{value:"Added",id:"added-4",level:3},{value:"API 5.3.3",id:"api-533",level:2},{value:"Added",id:"added-5",level:3},{value:"API 5.3.2",id:"api-532",level:2},{value:"API 5.3.1",id:"api-531",level:2},{value:"API 5.3.0",id:"api-530",level:2},{value:"Added",id:"added-6",level:3},{value:"API 5.2.1",id:"api-521",level:2},{value:"Changed",id:"changed-2",level:3},{value:"Fixed",id:"fixed-6",level:3},{value:"API 5.2.0",id:"api-520",level:2},{value:"Added",id:"added-7",level:3},{value:"API 5.1.1",id:"api-511",level:3},{value:"Fixed",id:"fixed-7",level:3},{value:"API 5.1.0",id:"api-510",level:3},{value:"Added",id:"added-8",level:3},{value:"Changed",id:"changed-3",level:3},{value:"Fixed",id:"fixed-8",level:3},{value:"API 5.0.0",id:"api-500",level:3},{value:"Added",id:"added-9",level:3},{value:"Changed",id:"changed-4",level:3},{value:"Fixed",id:"fixed-9",level:3},{value:"API 4.4.2",id:"api-442",level:3},{value:"Fixed",id:"fixed-10",level:3},{value:"API 4.4.1",id:"api-441",level:3},{value:"Fixed",id:"fixed-11",level:3},{value:"API 4.4.0",id:"api-440",level:2},{value:"Added",id:"added-10",level:3},{value:"Changed",id:"changed-5",level:3},{value:"Fixed",id:"fixed-12",level:3},{value:"Deprecated",id:"deprecated",level:3},{value:"API 4.3.0",id:"api-430",level:2},{value:"Changed",id:"changed-6",level:3},{value:"API 4.2.6",id:"api-426",level:2},{value:"API 4.2.5",id:"api-425",level:2},{value:"API 4.2.4",id:"api-424",level:2},{value:"API 4.2.3",id:"api-423",level:2},{value:"API 4.2.2",id:"api-422",level:2},{value:"Added",id:"added-11",level:3},{value:"Changed",id:"changed-7",level:3},{value:"Deprecated",id:"deprecated-1",level:3},{value:"Fixed",id:"fixed-13",level:3},{value:"API 4.2.1",id:"api-421",level:2},{value:"Fixed",id:"fixed-14",level:3},{value:"API 4.2.0",id:"api-420",level:2},{value:"Added",id:"added-12",level:3},{value:"Changed",id:"changed-8",level:3},{value:"Deprecated",id:"deprecated-2",level:3},{value:"Fixed",id:"fixed-15",level:3},{value:"API 4.0.0 build 004",id:"api-400-build-004",level:2},{value:"Added",id:"added-13",level:3},{value:"Fixed",id:"fixed-16",level:3},{value:"API 4.0.0 build 003",id:"api-400-build-003",level:2},{value:"Added",id:"added-14",level:3},{value:"Changed",id:"changed-9",level:3},{value:"Removed",id:"removed-1",level:3},{value:"Fixed",id:"fixed-17",level:3},{value:"API 4.0.0 build 001",id:"api-400-build-001",level:2},{value:"Added",id:"added-15",level:3},{value:"Changed",id:"changed-10",level:3}],o={toc:p};function u(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,l.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"api-develop"},"API develop"),(0,i.kt)("h3",{id:"added"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API6 (Based on API5)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"API6::browse: List server contents in a directory-style listing (Music, Podcast and Video catalogs)"),(0,i.kt)("li",{parentName:"ul"},"API6::list: Replace get_indexes with a faster lookup and similar parameters returning ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"prefix")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"basename")),(0,i.kt)("li",{parentName:"ul"},"API6::catalog_add: Create a catalog (Require: 75)"),(0,i.kt)("li",{parentName:"ul"},"API6::catalog_delete: Delete a catalog (Require: 75)"),(0,i.kt)("li",{parentName:"ul"},"API6::live_stream_create: Create a new live stream (radio station)"),(0,i.kt)("li",{parentName:"ul"},"API6::live_stream_edit: Edit a live stream"),(0,i.kt)("li",{parentName:"ul"},"API6::live_stream_delete: Delete a stream by ID"),(0,i.kt)("li",{parentName:"ul"},"API6::register: Allow users to register an account (if enabled)"),(0,i.kt)("li",{parentName:"ul"},"API6::playlist_create: Return an error if the playlist name already exists for that user"),(0,i.kt)("li",{parentName:"ul"},"API6::user_edit (previously user_create):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"group")," parameter to pick a catalog filter group"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"fullname_public")," to enable/disable using fullname in public display"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"reset_apikey")," to reset a user Api Key"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"reset_streamtoken")," to reset a user Stream Token"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"clear_stats")," reset all stats for this user ",(0,i.kt)("strong",{parentName:"li"},"be very sure about this one!")))),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"prefix")," (Prefix for Full Name) to album & artist responses"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"basename")," (Name without prefix) to album & artist responses"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"bitrate")," to Democratic objects"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"format")," to Song and Democratic objects"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"stream_format"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"stream_bitrate"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"stream_mime")," to Song objects (This is the transcoded output for a stream)"))),(0,i.kt)("li",{parentName:"ul"},"JSON responses",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Cast bool fields to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),' instead of "1" & "0"'),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"total_count")," to resonses to give clients an idea of the total possible objects"))),(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"album_disk")," as a search type (uses album rules)"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_genre")," to album and artist searches"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"possible_duplicate_album")," to song search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_artist")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"barcode")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"catalog_number")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"smartplaylist")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"duplicate_tracks")," to album and song search (MIN & MAX id for song search)"),(0,i.kt)("li",{parentName:"ul"},"Alias ",(0,i.kt)("inlineCode",{parentName:"li"},"possible_duplicate_album")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"possible_duplicate")," for album search"),(0,i.kt)("li",{parentName:"ul"},"Alias ",(0,i.kt)("inlineCode",{parentName:"li"},"album_genre")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"genre")," for album search"),(0,i.kt)("li",{parentName:"ul"},"Alias ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_album")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid")," for album search"),(0,i.kt)("li",{parentName:"ul"},"Alias ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_artist")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid")," for artist search"),(0,i.kt)("li",{parentName:"ul"},"Alias ",(0,i.kt)("inlineCode",{parentName:"li"},"song_genre")," => ",(0,i.kt)("inlineCode",{parentName:"li"},"genre")," for song search")))),(0,i.kt)("h3",{id:"changed"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api6",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Renamed ",(0,i.kt)("inlineCode",{parentName:"li"},"user_update")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"user_edit")," (user_update still works and will be depreciated in API7)"))),(0,i.kt)("li",{parentName:"ul"},"ALL",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add all possible plugin preferences to the system list so they can't be deleted"),(0,i.kt)("li",{parentName:"ul"},"Albums with no album_artist may now return 0 artist called 'Various'"),(0,i.kt)("li",{parentName:"ul"},"Don't send AlbumDisk objects to the API"),(0,i.kt)("li",{parentName:"ul"},"Send the authenticated user to all method calls"))),(0,i.kt)("li",{parentName:"ul"},"XML responses",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api6 XML success and error response messages are put in a ",(0,i.kt)("inlineCode",{parentName:"li"},"message")," element (like json)"),(0,i.kt)("li",{parentName:"ul"},"For data responses id is the only attribute and everything else is an element"),(0,i.kt)("li",{parentName:"ul"},"Name was not set as an attribute OR an element so now it's always an element"),(0,i.kt)("li",{parentName:"ul"},"Return original XML output (that may be malformed) when loadxml fails."))),(0,i.kt)("li",{parentName:"ul"},"Api6::get_indexes: This method is depreciated and will be removed in Ampache 7.0.0 (Use Api6::list instead)")),(0,i.kt)("h3",{id:"removed"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api6",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"preciserating")," removed from all objects (use rating)"))),(0,i.kt)("li",{parentName:"ul"},"Api6::album_songs remove ",(0,i.kt)("inlineCode",{parentName:"li"},"exact")," as a parameter"),(0,i.kt)("li",{parentName:"ul"},"Api6::stream remove ",(0,i.kt)("inlineCode",{parentName:"li"},"podcast")," as a valid ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," value"),(0,i.kt)("li",{parentName:"ul"},"Warning of depreciated methods from API5 have been removed from API6",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api6::tag"),(0,i.kt)("li",{parentName:"ul"},"Api6::tags"),(0,i.kt)("li",{parentName:"ul"},"Api6::tag_albums"),(0,i.kt)("li",{parentName:"ul"},"Api6::tag_artists"),(0,i.kt)("li",{parentName:"ul"},"Api6::tag_songs")))),(0,i.kt)("h3",{id:"fixed"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ALL",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"advanced_search methods were breaking with various offset and limits"))),(0,i.kt)("li",{parentName:"ul"},"Api6 JSON",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Share and Bookmark object id's were not strings"))),(0,i.kt)("li",{parentName:"ul"},"Api3",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Never send 0 ratings. They should always be null (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"<rating/>"),")"),(0,i.kt)("li",{parentName:"ul"},"Artists method parameters were incorrect")))),(0,i.kt)("h2",{id:"api-560"},"API 5.6.0"),(0,i.kt)("h3",{id:"fixed-1"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ALL",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"share_create and share_edit methods broken when setting expiry days"),(0,i.kt)("li",{parentName:"ul"},"advanced_search methods were breaking with various offset and limits"),(0,i.kt)("li",{parentName:"ul"},"playlists methods parameter 'exact' always ending up false"))),(0,i.kt)("li",{parentName:"ul"},"Api5",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"update_art hardcoded url to artist"),(0,i.kt)("li",{parentName:"ul"},"Typo in song bitrate xml")))),(0,i.kt)("h2",{id:"api-556"},"API 5.5.6"),(0,i.kt)("p",null,"Fix various runtime errors and incorrect parameters for responses."),(0,i.kt)("h3",{id:"changed-1"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API browses all point to the Api class"),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"FILTER_VALIDATE_IP")," on ping calls")),(0,i.kt)("h3",{id:"fixed-2"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api5",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"songs")," set_filter call without browse parameter may have lost info"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get_indexes")," set album_artist filter correctly"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"artists")," set album_artist filter correctly"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"share_create")," undefined filter check"))),(0,i.kt)("li",{parentName:"ul"},"Api4",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"songs")," set_filter call without browse parameter may have lost info"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"get_indexes")," set album_artist filter correctly"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeline")," incorrect JSON attribute ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"catalogs")," JSON had incorrect data for ",(0,i.kt)("inlineCode",{parentName:"li"},"last_add")," and missing ",(0,i.kt)("inlineCode",{parentName:"li"},"enabled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"albums")," return an empty response with a bad artist id"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"download"),' url parameter order matching "client, action, cache"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"catalogs")," undefined filter check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"podcast")," undefined filter check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"podcast_edit")," undefined filter check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"podcasts")," undefined filter check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"share_create")," undefined filter check"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"share_edit")," undefined filter check"))),(0,i.kt)("li",{parentName:"ul"},"Api3",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"album_songs")," return an empty response with a bad album id"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"artist_albums")," return an empty response with a bad artist id"),(0,i.kt)("li",{parentName:"ul"},"Calls to ",(0,i.kt)("inlineCode",{parentName:"li"},"songs")," with user ID instead of user object")))),(0,i.kt)("h2",{id:"api-554"},"API 5.5.4"),(0,i.kt)("h3",{id:"fixed-3"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"User count in Api::ping and Api::handshake was doubled"),(0,i.kt)("li",{parentName:"ul"},"Api3::stats method had incorrect recent parameters"),(0,i.kt)("li",{parentName:"ul"},"Ensure the output ",(0,i.kt)("inlineCode",{parentName:"li"},"bitrate")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"mime")," are set for song objects")),(0,i.kt)("h2",{id:"api-553"},"API 5.5.3"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-552"},"API 5.5.2"),(0,i.kt)("h3",{id:"added-1"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_artist")," as a search type (uses artist rules)"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"album_artist")," as a search type (uses artist rules)"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_genre"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_artist"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_song")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_genre"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_album"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"mbid_song")," to artist search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"possible_duplicate_album")," to song search")))),(0,i.kt)("h3",{id:"fixed-4"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"unable to retrieve song_artist or album_artist results")))),(0,i.kt)("h2",{id:"api-551"},"API 5.5.1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-550"},"API 5.5.0"),(0,i.kt)("h3",{id:"added-2"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::stream add new types ",(0,i.kt)("inlineCode",{parentName:"li"},"playlist")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"search")," (Streams a random object from these lists)"),(0,i.kt)("li",{parentName:"ul"},"Api::download add new types ",(0,i.kt)("inlineCode",{parentName:"li"},"playlist")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"search")),(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"podcast")," as a search type",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"title")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"podcast_episode")," (Search by podcast episode name)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"time")," (Episode length in minutes)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"state")," (Completed, Pending Skipped)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"added")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"pubdate")," (Episode Publication Date)"))),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"podcast_episode")," as a search type",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"title")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"podcast")," (Search by podcast name)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"time")," (Length in minutes)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"state")," (Completed, Pending Skipped)"),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"file")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"added")),(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"pubdate")," (Publication Date)"))),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"genre")," as a search type",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add rule ",(0,i.kt)("inlineCode",{parentName:"li"},"title"))))))),(0,i.kt)("h3",{id:"fixed-5"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API4::get_indexes podcast_episode was encoding into the API5 object"),(0,i.kt)("li",{parentName:"ul"},"API4::share_create was unable to share when using lowercase types"),(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Added missing ",(0,i.kt)("inlineCode",{parentName:"li"},"song")," (was ",(0,i.kt)("inlineCode",{parentName:"li"},"song_title"),") to album searches")))),(0,i.kt)("h2",{id:"api--541"},"API  5.4.1"),(0,i.kt)("h3",{id:"added-3"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Include ",(0,i.kt)("inlineCode",{parentName:"li"},"lyrics")," in Song objects"),(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," to album and artist search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"track")," to song search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"summary")," to artist search")))),(0,i.kt)("h2",{id:"api-540"},"API 5.4.0"),(0,i.kt)("h3",{id:"added-4"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"file")," to album and artist search")))),(0,i.kt)("h2",{id:"api-533"},"API 5.3.3"),(0,i.kt)("h3",{id:"added-5"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_title")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"album_title")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"song_title")," to artist search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"orphaned_album")," to song search")))),(0,i.kt)("h2",{id:"api-532"},"API 5.3.2"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-531"},"API 5.3.1"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-530"},"API 5.3.0"),(0,i.kt)("h3",{id:"added-6"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"advanced_search:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"songrating")," to album search (My Rating (Song))"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"songrating")," (My Rating (Song)) and ",(0,i.kt)("inlineCode",{parentName:"li"},"albumrating")," (My Rating (Album)) to artist search"),(0,i.kt)("li",{parentName:"ul"},"Allow empty/null searches for all mbid searches"),(0,i.kt)("li",{parentName:"ul"},"Allow empty/null searches for label searches"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_count")," to album and artist search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"album_count")," to artist search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"myplayedartist")," (Played by Me (Artist)) to album search"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"song_artist")," to album search"),(0,i.kt)("li",{parentName:"ul"},"Add alias ",(0,i.kt)("inlineCode",{parentName:"li"},"album_artist")," to album search for ",(0,i.kt)("inlineCode",{parentName:"li"},"artist")," searches"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"recent_added")," to album search")))),(0,i.kt)("h2",{id:"api-521"},"API 5.2.1"),(0,i.kt)("h3",{id:"changed-2"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API5",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Return the xml total_count of playlists based on hide_search preference")))),(0,i.kt)("h3",{id:"fixed-6"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API4",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"update_from_tags: type case error"),(0,i.kt)("li",{parentName:"ul"},"rate: Object type to class mapping"),(0,i.kt)("li",{parentName:"ul"},"flag: Object type to class mapping"),(0,i.kt)("li",{parentName:"ul"},"update_art: Object type to class mapping and type case check"),(0,i.kt)("li",{parentName:"ul"},"update_from_tags: Object type to class mapping"),(0,i.kt)("li",{parentName:"ul"},"genre and tag function compatibility"))),(0,i.kt)("li",{parentName:"ul"},"API3",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"stats: incorrect getRandom call"),(0,i.kt)("li",{parentName:"ul"},"rate: Object type to class mapping"),(0,i.kt)("li",{parentName:"ul"},"playlist: bad escaping on the playlist id")))),(0,i.kt)("h2",{id:"api-520"},"API 5.2.0"),(0,i.kt)("p",null,"Check out the docs for multi API support at ",(0,i.kt)("a",{parentName:"p",href:"https://ampache.org/api/"},"ampache.org")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"note")," JSON didn't exist for API3 so all json requests from API3 calls will revert to API5"),(0,i.kt)("h3",{id:"added-7"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Support for API3, API4 and API5 responses including PHP8 support (keeps original tag calls)"),(0,i.kt)("li",{parentName:"ul"},"API5",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"playlists: sql for searches wasn't filtering"),(0,i.kt)("li",{parentName:"ul"},"playlists: add parameter 'show_dupes' if true ignore 'api_hide_dupe_searches' setting"))),(0,i.kt)("li",{parentName:"ul"},"API4",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"playlists: add parameter 'show_dupes' if true ignore 'api_hide_dupe_searches' setting"))),(0,i.kt)("li",{parentName:"ul"},"API3",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Added genre calls as an alias to tag functions to match API4 and API5")))),(0,i.kt)("h3",{id:"api-511"},"API 5.1.1"),(0,i.kt)("h3",{id:"fixed-7"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Access to podcast_episode_delete"),(0,i.kt)("li",{parentName:"ul"},"stats calls with an offest and limit"),(0,i.kt)("li",{parentName:"ul"},"advanced_search calls with an offset and limit")),(0,i.kt)("h3",{id:"api-510"},"API 5.1.0"),(0,i.kt)("h3",{id:"added-8"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NEW API functions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api::live_stream (get a radio stream by id)"),(0,i.kt)("li",{parentName:"ul"},"Api::live_streams"))),(0,i.kt)("li",{parentName:"ul"},"Api::stream Added type 'podcast_episode' ('podcast' to be removed in Ampache 6.0.0)"),(0,i.kt)("li",{parentName:"ul"},"Add 'time' and 'size' to all podcast_episode responses")),(0,i.kt)("h3",{id:"changed-3"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"live_stream objects added 'catalog' and 'site_url'"),(0,i.kt)("li",{parentName:"ul"},"stats: additional type values: 'video', 'playlist', 'podcast', 'podcast_episode'")),(0,i.kt)("h3",{id:"fixed-8"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"get_indexes: JSON didn't think live_streams was valid (it is)"),(0,i.kt)("li",{parentName:"ul"},"record_play: user is optional"),(0,i.kt)("li",{parentName:"ul"},"Bad xml tags in deleted functions"),(0,i.kt)("li",{parentName:"ul"},"scrobble: Add song",(0,i.kt)("em",{parentName:"li"},"mbid, artist_mbid, album_mbid (docs have no '"),"' so support both)")),(0,i.kt)("h3",{id:"api-500"},"API 5.0.0"),(0,i.kt)("p",null,"All API code that used 'Tag' now references 'Genre' instead"),(0,i.kt)("p",null,'This version of the API is the first semantic version. "5.0.0"'),(0,i.kt)("h3",{id:"added-9"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add global playcount to podcast_episode and video responses"),(0,i.kt)("li",{parentName:"ul"},"searches (the number of saved smartlists) added to the handshake/ping response"),(0,i.kt)("li",{parentName:"ul"},"NEW API functions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api::song_delete (Delete files when you are allowed to)"),(0,i.kt)("li",{parentName:"ul"},"Api::user_preferences (Get your user preferences)"),(0,i.kt)("li",{parentName:"ul"},"Api::user_preference (Get your preference by name)"),(0,i.kt)("li",{parentName:"ul"},"Api::system_update (Check Ampache for updates and run the update if there is one.)"),(0,i.kt)("li",{parentName:"ul"},"Api::system_preferences (Preferences for the system user)"),(0,i.kt)("li",{parentName:"ul"},"Api::system_preference (Get a system preference by name)"),(0,i.kt)("li",{parentName:"ul"},"Api::preference_create (Add a new preference to Ampache)"),(0,i.kt)("li",{parentName:"ul"},"Api::preference_edit (Edit a preference value by name; optionally apply to all users)"),(0,i.kt)("li",{parentName:"ul"},"Api::preference_delete (Delete a preference by name)"),(0,i.kt)("li",{parentName:"ul"},"Api::labels (list your record labels)"),(0,i.kt)("li",{parentName:"ul"},"Api::label (get a label by id)"),(0,i.kt)("li",{parentName:"ul"},"Api::label_artists (get all artists attached to that label)"),(0,i.kt)("li",{parentName:"ul"},"Api::get_bookmark (See if you've previously played the file)"),(0,i.kt)("li",{parentName:"ul"},"Api::bookmarks (List all bookmarks created by your account)"),(0,i.kt)("li",{parentName:"ul"},"Api::bookmark_create (Create a bookmark to allow revisting later)"),(0,i.kt)("li",{parentName:"ul"},"Api::bookmark_edit (Edit a bookmark)"),(0,i.kt)("li",{parentName:"ul"},"Api::bookmark_delete (Delete a bookmark by object id, type, user and client name)"),(0,i.kt)("li",{parentName:"ul"},"Api::localplay_songs (Get the list of songs in your localplay instance)"),(0,i.kt)("li",{parentName:"ul"},"API::deleted_songs"),(0,i.kt)("li",{parentName:"ul"},"API::deleted_podcast_episodes"),(0,i.kt)("li",{parentName:"ul"},"API::deleted_videos")))),(0,i.kt)("h3",{id:"changed-4"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The API version matches release version '5.0.0'"),(0,i.kt)("li",{parentName:"ul"},"A backcompatible version (500000) is sent when using old api versions"),(0,i.kt)("li",{parentName:"ul"},"handshake and ping counts now return the actual object counts for playlists",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"'playlists' => $counts","['playlist']",","),(0,i.kt)("li",{parentName:"ul"},"'searches' => $counts","['search']",","),(0,i.kt)("li",{parentName:"ul"},"'playlists_searches' => $counts","['playlist']"," + $counts","['search']"))),(0,i.kt)("li",{parentName:"ul"},"Renamed functions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"tags => genres"),(0,i.kt)("li",{parentName:"ul"},"tag => genre"),(0,i.kt)("li",{parentName:"ul"},"tag_artists => genre_artists"),(0,i.kt)("li",{parentName:"ul"},"tag_albums => genre_albums"),(0,i.kt)("li",{parentName:"ul"},"tag_songs => genre_songs"))),(0,i.kt)("li",{parentName:"ul"},"Don't allow duplicate podcast feeds"),(0,i.kt)("li",{parentName:"ul"},"Make filter optional in shares, genre_artists, genre_albums, genre_songs (Used as a general catch all method like genres)"),(0,i.kt)("li",{parentName:"ul"},"Error Codes and response structure has changed",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"4700 Access Control not Enabled"),(0,i.kt)("li",{parentName:"ul"},"4701 Received Invalid Handshake"),(0,i.kt)("li",{parentName:"ul"},"4703 Access Denied"),(0,i.kt)("li",{parentName:"ul"},"4704 Not Found"),(0,i.kt)("li",{parentName:"ul"},"4705 Missing Method"),(0,i.kt)("li",{parentName:"ul"},"4706 Depreciated Method"),(0,i.kt)("li",{parentName:"ul"},"4710 Bad Request"),(0,i.kt)("li",{parentName:"ul"},"4742 Failed Access Check"))),(0,i.kt)("li",{parentName:"ul"},"stats: Removed back compat from older versions. Only 'type' is mandatory"),(0,i.kt)("li",{parentName:"ul"},"Return empty objects when the request was correct but the results were empty"),(0,i.kt)("li",{parentName:"ul"},"Don't transcode podcast_episodes"),(0,i.kt)("li",{parentName:"ul"},"localplay",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"added 'track' parameter used by 'skip' commands to go to the playlist track (playlist starts at 1)"))),(0,i.kt)("li",{parentName:"ul"},"system_update: update the database if required as well"),(0,i.kt)("li",{parentName:"ul"},"playlist_edit: added 'owner' as an optional parameter (Change playlist owner to the user id)"),(0,i.kt)("li",{parentName:"ul"},"catalog_file: Allow comma-separate task values. (good for API inotify scripts)"),(0,i.kt)("li",{parentName:"ul"},'podcast_episode object "pubdate" has been changed to ISO 8601 date (2004-02-12T15:19:21+00:00)'),(0,i.kt)("li",{parentName:"ul"},'podcast object "build_date" and "sync_date" have also been changed to ISO 8601 date')),(0,i.kt)("h3",{id:"fixed-9"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"catalog_file: Couldn't add files")),(0,i.kt)("h3",{id:"api-442"},"API 4.4.2"),(0,i.kt)("h3",{id:"fixed-10"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API::indexes Artist albums were being added incorrectly for XML"),(0,i.kt)("li",{parentName:"ul"},"Send back the full album name in responses")),(0,i.kt)("h3",{id:"api-441"},"API 4.4.1"),(0,i.kt)("h3",{id:"fixed-11"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API::stats would not offset recent calls")),(0,i.kt)("h2",{id:"api-440"},"API 4.4.0"),(0,i.kt)("h3",{id:"added-10"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NEW API functions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api::users (ID and Username of the site users)"))),(0,i.kt)("li",{parentName:"ul"},"Api::localplay added new options to 'command' ('pause', 'add', 'volume_up', 'volume_down', 'volume_mute', 'delete_all', 'skip')"),(0,i.kt)("li",{parentName:"ul"},"Api::localplay added parameters:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"'oid' (integer) object_id to add //optional"),(0,i.kt)("li",{parentName:"ul"},"'type' (string) Default: 'Song' ('Song', 'Video', 'Podcast_Episode', 'Channel', 'Broadcast', 'Democratic', 'Live_Stream') //optional"),(0,i.kt)("li",{parentName:"ul"},"'clear' (integer) 0|1 clear the current playlist on add //optional"))),(0,i.kt)("li",{parentName:"ul"},"Api::playlist_edit added new parameter 'sort': (0,1) sort the playlist by 'Artist, Album, Song' //optional"),(0,i.kt)("li",{parentName:"ul"},"Api::get_indexes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"New type options: 'album_artist', 'podcast', 'podcast_episode', 'share', 'video'"),(0,i.kt)("li",{parentName:"ul"},"Added parameter 'include': (0,1) (add the extra songs details if a playlist or podcast_episodes if a podcast)"))),(0,i.kt)("li",{parentName:"ul"},"Api::rate - Added types 'playlist', 'podcast', 'podcast_episode', 'video', 'tvshow', 'tvshow_season'"),(0,i.kt)("li",{parentName:"ul"},"Api::flag - Added types 'podcast', 'podcast_episode', 'video', 'tvshow', 'tvshow_season'"),(0,i.kt)("li",{parentName:"ul"},"Add time to artist and album objects. (total time of all songs in seconds)"),(0,i.kt)("li",{parentName:"ul"},"Add songcount, albumcount to artist objects. (time in seconds)"),(0,i.kt)("li",{parentName:"ul"},"Add songcount to album objects. (time in seconds)"),(0,i.kt)("li",{parentName:"ul"},"Add type (release_type) to album objects"),(0,i.kt)("li",{parentName:"ul"},"Add disk to song objects"),(0,i.kt)("li",{parentName:"ul"},"Add time to video objects. (time in seconds)"),(0,i.kt)("li",{parentName:"ul"},"Add title, mime, catalog to podcast_episodes"),(0,i.kt)("li",{parentName:"ul"},"Api::advanced_search Add 'playlist', 'user' and 'video' to search types"),(0,i.kt)("li",{parentName:"ul"},"Api::handshake added extra total counts to the response",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"users, tags, podcasts, podcast_episodes, shares, licenses, live_streams, labels"))),(0,i.kt)("li",{parentName:"ul"},"Api::ping match the handshake response (excluding the auth token)")),(0,i.kt)("h3",{id:"changed-5"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"get_indexes: 'playlist' now requires include=1 for xml calls if you want the tracks"),(0,i.kt)("li",{parentName:"ul"},"Make filter optional in shares"),(0,i.kt)("li",{parentName:"ul"},"Api::podcast_episodes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'"url" is now a play url (instead of a link to the episode)'),(0,i.kt)("li",{parentName:"ul"},'"public_url" is now the old episode link')))),(0,i.kt)("h3",{id:"fixed-12"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::podcast_edit wasn't able to edit a podcast..."),(0,i.kt)("li",{parentName:"ul"},"Api::democratic was using action from localplay in the return responses"),(0,i.kt)("li",{parentName:"ul"},"get_indexes for XML didn't include podcast indexes"),(0,i.kt)("li",{parentName:"ul"},"Set OUTDATED_DATABASE_OK on image.php, play/index.php and share.php to stop blocking requests"),(0,i.kt)("li",{parentName:"ul"},"Don't limit sub items when using a limit (e.g return all podcast episodes when selecting a podcast)")),(0,i.kt)("h3",{id:"deprecated"},"Deprecated"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Dropped in API 5.0.0",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Api::get_indexes; stop including playlist track and id in xml by default"),(0,i.kt)("li",{parentName:"ul"},'Album objects: "tracks" will only include track details. Use "songcount"'),(0,i.kt)("li",{parentName:"ul"},'Artist objects: "albums", "songs" will only include track details Use "albumcount" and "songcount"')))),(0,i.kt)("h2",{id:"api-430"},"API 4.3.0"),(0,i.kt)("h3",{id:"changed-6"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::record_play",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Make 'user' parameter optional"),(0,i.kt)("li",{parentName:"ul"},"Allow 'user' to the be user_id ",(0,i.kt)("strong",{parentName:"li"},"or")," the username string"),(0,i.kt)("li",{parentName:"ul"},"Add 'date' parameter (optional)"),(0,i.kt)("li",{parentName:"ul"},"Require 100 (Admin) permission to record plays for other users"))),(0,i.kt)("li",{parentName:"ul"},"Api::get_indexes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add 'hide_search' parameter (optional)"))),(0,i.kt)("li",{parentName:"ul"},"Api::playlists",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Add 'hide_search' parameter (optional)"))),(0,i.kt)("li",{parentName:"ul"},"Setting a limit of 'none' would slice away all the results")),(0,i.kt)("h2",{id:"api-426"},"API 4.2.6"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-425"},"API 4.2.5"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-424"},"API 4.2.4"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-423"},"API 4.2.3"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"NO CHANGE")),(0,i.kt)("h2",{id:"api-422"},"API 4.2.2"),(0,i.kt)("p",null,"Minor bugfixes"),(0,i.kt)("h3",{id:"added-11"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::advanced_search added parameter 'random' (0|1) to shuffle your searches")),(0,i.kt)("h3",{id:"changed-7"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Remove spaces from advanced_search rule names. (Backwards compatible with old names)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"'has image' => 'has_image'"),(0,i.kt)("li",{parentName:"ul"},"'image height' => 'image_height'"),(0,i.kt)("li",{parentName:"ul"},"'image width' => 'image_width'"),(0,i.kt)("li",{parentName:"ul"},"'filename' => 'file' (Video search)")))),(0,i.kt)("h3",{id:"deprecated-1"},"Deprecated"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Search rules 'has image', 'image height', 'image width', 'filename'. (Removed in Ampache 5.0.0)")),(0,i.kt)("h3",{id:"fixed-13"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::stream, Api::download Api::playlist_generate 'format' parameter was overwritten with 'xml' or 'json'"),(0,i.kt)("li",{parentName:"ul"},"Produce valid XML for playlist_generate using the 'id' format in XML")),(0,i.kt)("h2",{id:"api-421"},"API 4.2.1"),(0,i.kt)("p",null,"No functional changes from 4.2.0"),(0,i.kt)("h3",{id:"fixed-14"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Filter in "playlist" and "playlist_songs" fixed')),(0,i.kt)("h2",{id:"api-420"},"API 4.2.0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"API versions will follow release version and no longer use builds in the integer versions (e.g. 420000)"),"\nAPI 5.0.0-release will be the first Ampache release to match the release string."),(0,i.kt)("h3",{id:"added-12"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JSON API now available!",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Call xml as normal:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"[<http://music.com.au/server/xml.server.php?action=handshake&auth=APIKEY&version=420000>]"))),(0,i.kt)("li",{parentName:"ul"},"Call the JSON server:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"[<http://music.com.au/server/json.server.php?action=handshake&auth=APIKEY&version=420000>]"))),(0,i.kt)("li",{parentName:"ul"},"Example XML and JSON responses available ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ampache/python3-ampache/tree/master/docs"},"here")))),(0,i.kt)("li",{parentName:"ul"},"NEW API functions",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"get_similar: send artist or song id to get related objects from last.fm"),(0,i.kt)("li",{parentName:"ul"},"shares: get a list of shares you can access"),(0,i.kt)("li",{parentName:"ul"},"share: get a share by id"),(0,i.kt)("li",{parentName:"ul"},"share_create: create a share"),(0,i.kt)("li",{parentName:"ul"},"share_edit: edit an existing share"),(0,i.kt)("li",{parentName:"ul"},"share_delete: delete an existing share"),(0,i.kt)("li",{parentName:"ul"},"podcasts: get a list of podcasts you can access"),(0,i.kt)("li",{parentName:"ul"},"podcast: get a podcast by id"),(0,i.kt)("li",{parentName:"ul"},"podcast_episodes: get a list of podcast_episodes you can access"),(0,i.kt)("li",{parentName:"ul"},"podcast_episode: get a podcast_episode by id"),(0,i.kt)("li",{parentName:"ul"},"podcast_episode_delete: delete an existing podcast_episode"),(0,i.kt)("li",{parentName:"ul"},"podcast_create: create a podcast"),(0,i.kt)("li",{parentName:"ul"},"podcast_edit: edit an existing podcast"),(0,i.kt)("li",{parentName:"ul"},"podcast_delete: delete an existing podcast"),(0,i.kt)("li",{parentName:"ul"},"update_podcast: sync and download new episodes"),(0,i.kt)("li",{parentName:"ul"},"licenses: get a list of licenses you can access"),(0,i.kt)("li",{parentName:"ul"},"license: get a license by id"),(0,i.kt)("li",{parentName:"ul"},"catalogs: get all the catalogs"),(0,i.kt)("li",{parentName:"ul"},"catalog: get a catalog by id"),(0,i.kt)("li",{parentName:"ul"},"catalog_file: clean, add, verify using the file path (good for scripting)")))),(0,i.kt)("h3",{id:"changed-8"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Bump API version to 420000 (4.2.0)"),(0,i.kt)("li",{parentName:"ul"},"All calls that return songs now include ",(0,i.kt)("inlineCode",{parentName:"li"},"<playlisttrack>")," which can be used to identify track order."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<playcount>")," added to objects with a playcount."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<license>")," added to song objects."),(0,i.kt)("li",{parentName:"ul"},"Don't gather art when adding songs"),(0,i.kt)("li",{parentName:"ul"},"Added actions to catalog_action. 'verify_catalog' 'gather_art'"),(0,i.kt)("li",{parentName:"ul"},'API function "playlist_edit": added ability to edit playlist items',(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"items  = (string) comma-separated song_id's (replace existing items with a new object_id) //optional"),(0,i.kt)("li",{parentName:"ul"},"tracks = (string) comma-separated playlisttrack numbers matched to items in order //optional"))),(0,i.kt)("li",{parentName:"ul"},"Random albums will get songs for all disks if album_group enabled")),(0,i.kt)("h3",{id:"deprecated-2"},"Deprecated"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"API Build number is depreciated (the last 3 digits of the api version)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'API 5.0.0 will be released with a string version ("5.0.0-release")'),(0,i.kt)("li",{parentName:"ul"},"All future 4.x.x API versions will follow the main Ampache version. (420000, 421000, 422000)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("del",{parentName:"li"},"total_count in the XML API is depreciated and will be removed in API 5.0.0."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"XML can count objects the same was as a JSON array ","[https://www.php.net/manual/en/simplexmlelement.count.php]"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("del",{parentName:"li"},"Genre in songs is depreciated and will be removed in API 5.0.0."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Use tag instead of genre, tag provides a genre ID as well as the name.")))),(0,i.kt)("h3",{id:"fixed-15"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Extra text in catalog API calls"),(0,i.kt)("li",{parentName:"ul"},"Don't fail the API calls when the database needs updating")),(0,i.kt)("h2",{id:"api-400-build-004"},"API 4.0.0 build 004"),(0,i.kt)("p",null,"Bump API version to 400004 (4.0.0 build 004)"),(0,i.kt)("h3",{id:"added-13"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add Api::check_access to warn when you can't access a function")),(0,i.kt)("h3",{id:"fixed-16"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix parameters using 0"),(0,i.kt)("li",{parentName:"ul"},"Get the correct total_count in xml when you set a limit"),(0,i.kt)("li",{parentName:"ul"},"Fix many XML formatting issues")),(0,i.kt)("h2",{id:"api-400-build-003"},"API 4.0.0 build 003"),(0,i.kt)("p",null,"Bump API version to 400003 (4.0.0 build 003)"),(0,i.kt)("h3",{id:"added-14"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"user_numeric searches also available in the API. (","[<https://ampache.org/api/api-xml-methods>]",")")),(0,i.kt)("h3",{id:"changed-9"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Api::playlist - filter mandatory"),(0,i.kt)("li",{parentName:"ul"},"Api::playlist_edit - filter mandatory. name and type now optional"),(0,i.kt)("li",{parentName:"ul"},"Api::user - Extend return values to include more user fields"),(0,i.kt)("li",{parentName:"ul"},"Playlist::create - Return duplicate playlist ID instead of creating a new one"),(0,i.kt)("li",{parentName:"ul"},"Do not limit smartlists based on item count (return everything you can access)"),(0,i.kt)("li",{parentName:"ul"},"Api/Database - Add last_count for search table to speed up access in API")),(0,i.kt)("h3",{id:"removed-1"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Artist::check - Remove MBID from Various Artist objects")),(0,i.kt)("h3",{id:"fixed-17"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix Song::update_song for label"),(0,i.kt)("li",{parentName:"ul"},"Fix Api issues relating to playlist access")),(0,i.kt)("h2",{id:"api-400-build-001"},"API 4.0.0 build 001"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Bump API version to 400002 (4.0.0 build 001)")),(0,i.kt)("h3",{id:"added-15"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Documented the Ampache API ","[<https://ampache.org/api/api-xml-methods>]"),(0,i.kt)("li",{parentName:"ul"},"Include smartlists in the API playlist calls."),(0,i.kt)("li",{parentName:"ul"},"Authentication: allow sha256 encrypted apikey for auth",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You must send an encrypted api key in the following fashion. (Hash key joined with username)"),(0,i.kt)("li",{parentName:"ul"},"$passphrase = hash('sha256', $username . hash('sha256', $apikey));"))),(0,i.kt)("li",{parentName:"ul"},"Added artist_tag to song searches"),(0,i.kt)("li",{parentName:"ul"},"flag: allows flagging object by id & type"),(0,i.kt)("li",{parentName:"ul"},"record_play: allows recording play of object without streaming"),(0,i.kt)("li",{parentName:"ul"},"catalog_action: allow running add_to_catalog|clean_catalog"),(0,i.kt)("li",{parentName:"ul"},"playlist_edit: allow editing name and type of playlist"),(0,i.kt)("li",{parentName:"ul"},"goodbye: Destroy session"),(0,i.kt)("li",{parentName:"ul"},"get_indexes: return simple index lists to allow a quicker library fill."),(0,i.kt)("li",{parentName:"ul"},"check_parameter: error when mandatory inputs are missing"),(0,i.kt)("li",{parentName:"ul"},"stream: Raw stream of song_id"),(0,i.kt)("li",{parentName:"ul"},"download: Download, not recorded as a play"),(0,i.kt)("li",{parentName:"ul"},"get_art: Raw art file like subsonic getCoverArt"),(0,i.kt)("li",{parentName:"ul"},"user_create: 'user' access level only!"),(0,i.kt)("li",{parentName:"ul"},"user_update: update user details and passwords for non-admins"),(0,i.kt)("li",{parentName:"ul"},"user_delete: you can't delete yourself or and admin account!"),(0,i.kt)("li",{parentName:"ul"},"update_from_tags: updates a single album, artist, song from the tag data instead of the entire library!"),(0,i.kt)("li",{parentName:"ul"},"update_art: updates a single album, artist, song running the gather_art process"),(0,i.kt)("li",{parentName:"ul"},"update_artist_info: Update artist information and fetch similar artists from last.fm"),(0,i.kt)("li",{parentName:"ul"},"playlist_generate: Get a list of song xml, indexes or id's based on some simple search criteria. care of @4phun")),(0,i.kt)("h3",{id:"changed-10"},"Changed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authentication: Require a handshake and generate unique sessions at all times"),(0,i.kt)("li",{parentName:"ul"},"advanced_search",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"'is not' has been added shifting values down the list.\n(0=contains, 1=does not contain, 2=starts with, 3=ends with, 4=is, 5=is not, 6=sounds like, 7=does not sound like)"),(0,i.kt)("li",{parentName:"ul"},"rule_1","['name']"," is depreciated. Instead of multiple searches for the same thing rule_1'name'\nhas been replaced with 'title' (I have put a temp workaround into the search rules to alleviate this change)"))),(0,i.kt)("li",{parentName:"ul"},"stats",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"allow songs|artists|albums (instead of just albums)"))),(0,i.kt)("li",{parentName:"ul"},"playlists",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"allow return of smartlists as well as regular playlists (set a 5000 limit on unlimited smartlists)"))),(0,i.kt)("li",{parentName:"ul"},"playlist_add_song",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Added check boolean to skip duplicate songs"))),(0,i.kt)("li",{parentName:"ul"},"playlist_remove_song",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Allow uid of song instead of the track id from the playlist")))))}u.isMDXComponent=!0}}]);