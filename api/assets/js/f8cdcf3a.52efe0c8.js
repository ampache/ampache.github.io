"use strict";(self.webpackChunkampache_org_api=self.webpackChunkampache_org_api||[]).push([[9965],{7166:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=n(5893),l=n(1151);const r={title:"Playlist Browse",metaTitle:"Playlist Browse",description:"API documentation"},t=void 0,a={id:"browse/playlist-browse",title:"Playlist Browse",description:"API documentation",source:"@site/docs/browse/playlist-browse.md",sourceDirName:"browse",slug:"/browse/playlist-browse",permalink:"/api/browse/playlist-browse",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Playlist Browse",metaTitle:"Playlist Browse",description:"API documentation"},sidebar:"api",previous:{title:"Live Stream Browse",permalink:"/api/browse/live_stream-browse"},next:{title:"Podcast Browse",permalink:"/api/browse/podcast_episode-browse"}},o={},c=[{value:"Available browse filters",id:"available-browse-filters",level:2},{value:"Available browse sorts",id:"available-browse-sorts",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,l.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"This page focuses on playlist browses."}),"\n",(0,i.jsxs)(s.p,{children:["Refer to the main ",(0,i.jsx)(s.a,{href:"https://ampache.org/api/api-browse",children:"Api Browse methods"})," page for further information regarding the other Browse types method."]}),"\n",(0,i.jsx)(s.p,{children:"In the Ampache API a playlist is actually a combined object of static playlists and dynamic searches."}),"\n",(0,i.jsxs)(s.p,{children:["Smartlists are prefixes with ",(0,i.jsx)(s.code,{children:"smart_"})," to ensure ID values don't clash with playlists"]}),"\n",(0,i.jsx)(s.p,{children:"This allows you to list these objects together in a single call."}),"\n",(0,i.jsx)(s.p,{children:"There are options to ignore, hide or filter searches from your playlist calls but playlist calls will return both types of object."}),"\n",(0,i.jsx)(s.h2,{id:"available-browse-filters",children:"Available browse filters"}),"\n",(0,i.jsx)(s.p,{children:"You can filter responses by the object name using the following conditions."}),"\n",(0,i.jsxs)(s.p,{children:["e.g. ",(0,i.jsx)(s.code,{children:"cond=like,unplayed+tracks"})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Name/Title string filters","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"like"}),"\n",(0,i.jsx)(s.li,{children:"not_like"}),"\n",(0,i.jsx)(s.li,{children:"equal"}),"\n",(0,i.jsx)(s.li,{children:"regex_match"}),"\n",(0,i.jsx)(s.li,{children:"regex_not_match"}),"\n",(0,i.jsx)(s.li,{children:"starts_with"}),"\n",(0,i.jsx)(s.li,{children:"not_starts_with"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"When returning combined playlists and smartlists in a single response you can use the following extra filters."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"hide_dupe_smartlist: Hide smartlists from the reesponse when there is already a playlist with the same name"}),"\n",(0,i.jsx)(s.li,{children:"smartlist: return smartlists only"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Finally these conditions are playlist specific and not commonly shared between browse types."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"playlist_open: filter by user accessible playlists (public playlists and owner = you)"}),"\n",(0,i.jsx)(s.li,{children:"playlist_user: filter for playlists you own"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"available-browse-sorts",children:"Available browse sorts"}),"\n",(0,i.jsxs)(s.p,{children:["Sorts are applied with an optional order. (",(0,i.jsx)(s.code,{children:"asc"})," or ",(0,i.jsx)(s.code,{children:"desc"})," depending on the method)"]}),"\n",(0,i.jsx)(s.p,{children:"When you apply a sort you will overwrite the default sort order."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"rand: Random sort order"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"date: Creation date"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"last_count: Item count"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"last_update: Modification date"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"name: Object name"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"rating: Object rating"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"type: Public / private"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"user: Owner id"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"username: Owner username"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"user_flag: Loved flag"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Additional sorts for smartlist browses"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"limit: Smartlist item limit"}),"\n",(0,i.jsx)(s.li,{children:"random: Smartlist has random sort enabled"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,l.ah)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,s,n)=>{n.d(s,{ah:()=>r});var i=n(7294);const l=i.createContext({});function r(e){const s=i.useContext(l);return i.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}}}]);