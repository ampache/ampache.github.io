"use strict";(self.webpackChunkampache_org_api=self.webpackChunkampache_org_api||[]).push([[7823],{5141:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"browse/playlist-browse","title":"Playlist Browse","description":"API documentation","source":"@site/docs/browse/playlist-browse.md","sourceDirName":"browse","slug":"/browse/playlist-browse","permalink":"/api/browse/playlist-browse","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Playlist Browse","metaTitle":"Playlist Browse","description":"API documentation"},"sidebar":"api","previous":{"title":"Live Stream Browse","permalink":"/api/browse/live_stream-browse"},"next":{"title":"Podcast Browse","permalink":"/api/browse/podcast_episode-browse"}}');var t=i(4848),n=i(8453);const r={title:"Playlist Browse",metaTitle:"Playlist Browse",description:"API documentation"},a=void 0,o={},c=[{value:"Available browse filters",id:"available-browse-filters",level:2},{value:"Available browse sorts",id:"available-browse-sorts",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,n.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"This page focuses on playlist browses."}),"\n",(0,t.jsxs)(s.p,{children:["Refer to the main ",(0,t.jsx)(s.a,{href:"https://ampache.org/api/api-browse",children:"Api Browse methods"})," page for further information regarding the other Browse types method."]}),"\n",(0,t.jsx)(s.p,{children:"In the Ampache API a playlist is actually a combined object of static playlists and dynamic searches."}),"\n",(0,t.jsxs)(s.p,{children:["Smartlists are prefixes with ",(0,t.jsx)(s.code,{children:"smart_"})," to ensure ID values don't clash with playlists"]}),"\n",(0,t.jsx)(s.p,{children:"This allows you to list these objects together in a single call."}),"\n",(0,t.jsx)(s.p,{children:"There are options to ignore, hide or filter searches from your playlist calls but playlist calls can return both types of object."}),"\n",(0,t.jsx)(s.h2,{id:"available-browse-filters",children:"Available browse filters"}),"\n",(0,t.jsx)(s.p,{children:"You can filter responses by the object name using the following conditions."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Name/Title string filters","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"like"}),"\n",(0,t.jsx)(s.li,{children:"not_like"}),"\n",(0,t.jsx)(s.li,{children:"equal"}),"\n",(0,t.jsx)(s.li,{children:"regex_match"}),"\n",(0,t.jsx)(s.li,{children:"regex_not_match"}),"\n",(0,t.jsx)(s.li,{children:"starts_with"}),"\n",(0,t.jsx)(s.li,{children:"not_starts_with"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["e.g. ",(0,t.jsx)(s.code,{children:"cond=like,unplayed+tracks"})]}),"\n",(0,t.jsx)(s.p,{children:"When returning combined playlists and smartlists in a single response you can use the following extra filters."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"hide_dupe_smartlist: Hide smartlists from the response when there is already a playlist with the same name"}),"\n",(0,t.jsx)(s.li,{children:"smartlist: return smartlists only"}),"\n",(0,t.jsx)(s.li,{children:"playlist_open: filter by user accessible playlists (public playlists and owner = you)"}),"\n",(0,t.jsx)(s.li,{children:"playlist_user: filter for playlists you own"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"available-browse-sorts",children:"Available browse sorts"}),"\n",(0,t.jsxs)(s.p,{children:["Sorts are applied with an optional order. (",(0,t.jsx)(s.code,{children:"asc"})," or ",(0,t.jsx)(s.code,{children:"desc"})," depending on the method)"]}),"\n",(0,t.jsx)(s.p,{children:"When you apply a sort you will overwrite the default sort order."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"id: object id"}),"\n",(0,t.jsx)(s.li,{children:"rand: random sort order using SQL RAND()"}),"\n",(0,t.jsx)(s.li,{children:"date: creation date"}),"\n",(0,t.jsx)(s.li,{children:"last_count: item count"}),"\n",(0,t.jsx)(s.li,{children:"last_update: modification date"}),"\n",(0,t.jsx)(s.li,{children:"name: object name"}),"\n",(0,t.jsx)(s.li,{children:"rating: object rating"}),"\n",(0,t.jsx)(s.li,{children:"type: public / private"}),"\n",(0,t.jsx)(s.li,{children:"user: owner id"}),"\n",(0,t.jsx)(s.li,{children:"username: owner username"}),"\n",(0,t.jsx)(s.li,{children:"user_flag: object loved flag"}),"\n",(0,t.jsx)(s.li,{children:"user_flag_rating: sort flagged status then rating"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Smartlist specific sorts will not affect playlist/combined results."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Additional sorts for smartlist browses","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"limit: smartlist item limit"}),"\n",(0,t.jsx)(s.li,{children:"random: smartlist has random sort enabled"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,n.RP)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{RP:()=>n,xA:()=>a});var l=i(6540);const t=l.createContext({});function n(e){const s=l.useContext(t);return l.useMemo((()=>"function"==typeof e?e(s):{...s,...e}),[s,e])}const r={};function a({components:e,children:s,disableParentContext:i}){let a;return a=i?"function"==typeof e?e({}):e||r:n(e),l.createElement(t.Provider,{value:a},s)}}}]);