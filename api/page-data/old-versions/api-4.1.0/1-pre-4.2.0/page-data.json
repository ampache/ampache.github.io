{"componentChunkName":"component---src-templates-docs-js","path":"/old-versions/api-4.1.0/1-pre-4.2.0","result":{"data":{"site":{"siteMetadata":{"title":"Ampache API | Ampache.org","docsLocation":"https://github.com/ampache/ampache/wiki"}},"mdx":{"fields":{"id":"97705ccc-8bb2-5f21-b9ad-c196f862edc3","title":"API 4.1.0","slug":"/old-versions/api-4.1.0/1-pre-4.2.0"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"API 4.1.0\",\n  \"metaTitle\": \"API 4.1.0\",\n  \"metaDescription\": \"API documentation\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Ampache's XML API\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compatible Versions:\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \">= 350001\")), mdx(\"p\", null, \"Ampache Provides an API for pulling out it's meta data in the form of simple XML documents. This was originally created for use by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://amarok.kde.org/\"\n  }), \"Amarok\"), \", but there is no reason it couldn't be used to create other front-ends to the Ampache data. Access to the API is controlled by the Internal \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"ACL\"\n  }), \"Access Control Lists\"), \". The KEY defined in the ACL is the passphrase that must be used to establish an API session. Currently all requests are limited to a maximum of 5000 results for performance reasons. To get additional results pass offset as an additional parameter.\\nIf you have any questions or requests for this API please submit a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ampache/ampache/issues?state=closed\"\n  }), \"Feature Request\"), \". All dates in the API calls should be passed as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.wikipedia.org/wiki/ISO_8601\"\n  }), \"ISO 8601\"), \" dates.\"), mdx(\"h2\", null, \"Sending Handshake Request\"), mdx(\"p\", null, \"Multiple authentication methods are available, described in the next sections.\"), mdx(\"h3\", null, \"User / Password\"), mdx(\"p\", null, \"The handshake is a combination of the following three things\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Encoded Passphrase\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Timestamp\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Username\")), mdx(\"p\", null, \"The key that must be passed to Ampache is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SHA256(TIME+KEY)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KEY\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SHA256('PASSWORD')\"), \". Below is a PHP example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PHP\"\n  }), \"$time = time();\\n$key = hash('sha256','mypassword');\\n$passphrase = hash('sha256',$time . $key);\\n\")), mdx(\"p\", null, \"Once you've generated the encoded passphrase, you can call the following URL (localhost/ampache is the location of your Ampache installation)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Text\"\n  }), \"http://localhost/ampache/server/xml.server.php?action=handshake&auth=PASSPHRASE&timestamp=TIME&version=350001&user=USER\\n\")), mdx(\"h3\", null, \"Api Key\"), mdx(\"p\", null, \"The key that must be passed to Ampache is the API Key generated for a specific user (none by default, only the administrator can generate one). Then call the following URL (localhost/ampache is the location of your Ampache installation):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Text\"\n  }), \"http://localhost/ampache/server/xml.server.php?action=handshake&auth=API_KEY&version=350001\\n\")), mdx(\"p\", null, \"In API 400001 the key that must be passed to Ampache is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SHA256(USER+KEY)\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KEY\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SHA256('APIKEY')\"), \". Below is a PHP example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PHP\"\n  }), \"$user = 'username';\\n$key = hash('sha256', 'myapikey');\\n$passphrase = hash('sha256', $user . $key);\\n\")), mdx(\"h3\", null, \"Other handshake-related stuff\"), mdx(\"h4\", null, \"Ampache sheme\"), mdx(\"p\", null, \"To standardize how to transfer Ampache connection information, the following Ampache scheme is defined.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Text\"\n  }), \"ampache://authentication@hostname[:port]/subdirectory[#parameters]\\n\")), mdx(\"p\", null, \"for example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ampache://myuser:mypwd@localhost/ampache\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ampache://yourapikey@localhost:993/ampache#ssl=true\")), mdx(\"h4\", null, \"Application Name\"), mdx(\"p\", null, \"By default Ampache uses USER_AGENT as application name but this could also be defined through http query string. Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&client=YourAppName\"), \" to override the application name. This parameter also works on stream sessions.\"), mdx(\"h4\", null, \"Geolocation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Latitude\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Longitude\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Place name\")), mdx(\"p\", null, \"Optionally, you can also provide geolocation information \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&geo_latitude=$latitude&geo_longitude=$longitude\"), \", with an optional place name if you already know coordinates match \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&geo_name=$placename\"), \".\"), mdx(\"h3\", null, \"Result\"), mdx(\"p\", null, \"If your authenticated User and IP match a row in the Access List the following will be returned.\"), mdx(\"p\", null, \"For XML\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-XML\"\n  }), \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<root>\\n    <auth><%AUTHENTICATION TOKEN%></auth>\\n    <api><%APIVERSION%></api>\\n    <session_expire><![CDATA[2019-12-03T09:36:46+10:00]]></session_expire>\\n    <update><![CDATA[2019-11-26T16:35:05+10:00]]></update>\\n    <add><![CDATA[2019-12-03T06:42:55+10:00]]></add>\\n    <clean><![CDATA[2019-12-03T06:41:02+10:00]]></clean>\\n    <songs><![CDATA[268302]]></songs>\\n    <albums><![CDATA[25686]]></albums>\\n    <artists><![CDATA[11055]]></artists>\\n    <playlists><![CDATA[20]]></playlists>\\n    <videos><![CDATA[0]]></videos>\\n    <catalogs><![CDATA[4]]></catalogs>\\n</root>\\n\")), mdx(\"p\", null, \"For JSON\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-JSON\"\n  }), \"{\\n    \\\"auth\\\": \\\"%AUTHENTICATION TOKEN%\\\",\\n    \\\"api\\\": \\\"%APIVERSION%\\\",\\n    \\\"session_expire\\\": \\\"2020-01-28T13:59:24+10:00\\\",\\n    \\\"update\\\": \\\"2020-01-24T19:29:35+10:00\\\",\\n    \\\"add\\\": \\\"2020-01-28T04:49:18+10:00\\\",\\n    \\\"clean\\\": \\\"2020-01-28T04:47:28+10:00\\\",\\n    \\\"songs\\\": \\\"274209\\\",\\n    \\\"albums\\\": \\\"26275\\\",\\n    \\\"artists\\\": \\\"11275\\\",\\n    \\\"playlists\\\": 31,\\n    \\\"videos\\\": \\\"0\\\",\\n    \\\"catalogs\\\": \\\"4\\\"\\n}\\n\")), mdx(\"p\", null, \"All future interactions with the Ampache API must include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AUTHENTICATION_TOKEN\"), \" as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" variable named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth\"), \".\"), mdx(\"h2\", null, \"Errors\"), mdx(\"p\", null, \"All errors will be returned as an XML document as specified in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"XML-API-ERRORS\"\n  }), \"XML API Error Document\"), \". When possible the text part of the message will be translated into the users configured language.\"), mdx(\"h2\", null, \"Methods\"), mdx(\"p\", null, \"All methods must be passed as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action=METHODNAME\"), \". All methods except the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handshake\"), \" can take an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset=XXX\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit=XXX\"), \". The limit determines the maximum number of results returned. The offset will tell Ampache where to start in the result set. For example if there are 100 total results and you set the offset to 50, and the limit to 50 Ampache will return results between 50 and 100. The default limit is 5000. The default offset is 0.\"), mdx(\"p\", null, \"You can also pass it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit=none\"), \" to overcome the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \" limitation and return \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all\"), \" the matching elements.\"), mdx(\"p\", null, \"For more in depth information regarding the different api servers you can view the following documentation pages.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"XML-methods\"\n  }), \"XML Documentation\"), \" page.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"JSON-methods\"\n  }), \"JSON Documentation\"), \" page.\")), mdx(\"h3\", null, \"Non-Data Methods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"handshake\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ping\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"goodbye (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"url_to_song\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"check_parameter (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"message (MINIMUM_API_VERSION=420000)\")), mdx(\"h3\", null, \"Data Methods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get_indexes (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"artists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"artist\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"artist_songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"artist_albums\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"albums\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"album\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"album_songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tags\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tag\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tag_artists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tag_albums\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tag_songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"song\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"advanced_search (CHANGED_IN_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stats (CHANGED_IN_API_VERSION=400001 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filter\"), \" added)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_create\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_edit (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_delete\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_add_song (CHANGED_IN_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_remove_song (CHANGED_IN_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"playlist_generate (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"shares (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"share (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"share_create (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"share_edit (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"share_delete (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get_similar (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcasts (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_create (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_edit (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_delete (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_episodes (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_episode (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"podcast_episode_delete (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"catalogs (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"catalog (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"catalog_file (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"search_songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"videos\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"video\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"user\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"user_create (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"user_update (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"user_delete (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stream (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"download (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get_art (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"flag (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"record_play (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"scrobble (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"licenses (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"license (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"license_songs (MINIMUM_API_VERSION=420000)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"followers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"following\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"toggle_follow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"last_shouts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"timeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"friends_timeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"catalog_action (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"update_from_tags (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"update_artist_info (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"update_art (MINIMUM_API_VERSION=400001)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"update_podcast (MINIMUM_API_VERSION=420000)\")), mdx(\"h3\", null, \"Control Methods\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"localplay\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"democratic\")), mdx(\"h2\", null, \"Request URL Examples\"), mdx(\"p\", null, \"For the purpose of this example the Ampache host is 'localhost' and the path to Ampache is /ampache\"), mdx(\"h3\", null, \"Requesting all genres whose name starts with Rock\"), mdx(\"p\", null, \"XML\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"http://localhost/ampache/server/xml.server.php?action=tags&auth=1234567890123456789012345678901&filter=Rock\\n\")), mdx(\"p\", null, \"JSON\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"http://localhost/ampache/server/json.server.php?action=tags&auth=1234567890123456789012345678901&filter=Rock\\n\")), mdx(\"h3\", null, \"Requesting all song titles, with an offset of 5000\"), mdx(\"p\", null, \"XML\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"http://localhost/ampache/server/xml.server.php?action=songs&auth=12345678901234567890123456789012&offset=5000\\n\")), mdx(\"p\", null, \"JSON\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"http://localhost/ampache/server/json.server.php?action=songs&auth=12345678901234567890123456789012&offset=5000\\n\")), mdx(\"h2\", null, \"advanced_search\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MINIMUM_API_VERSION=380001\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CHANGED_IN_API_VERSION=400001\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CHANGED_IN_API_VERSION=410001\")), mdx(\"h3\", null, \"Changes to text searches for 410001\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metadata Search is combined with text and numeric. Refer to the Metadata operator table to see the new order after adding regex to text fields.\")), mdx(\"h3\", null, \"Changes to text searches for 400001\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'is not' has been added shifting values down the list.\\n0=contains, 1=does not contain, 2=starts with, 3=ends with\\n4=is, 5=is not, 6=sounds like, 7=does not sound like\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule_1\", \"['name']\", \" is depreciated. Instead of rule_1\", \"['name']\", \" use rule_1\", \"['title']\", \" (I have put a temp workaround into the search rules to alleviate this change for any existing apps)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Metadata Search is combined with text and numeric. Meaning that changes to text lists push the numeric fields down.\")), mdx(\"h3\", null, \"Using advanced_search\"), mdx(\"p\", null, \"Perform an advanced search given passed rules. This works in a similar way to the web/UI search pages.\\nYou can pass multiple rules as well as joins to create in depth search results\"), mdx(\"p\", null, \"Rules must be sent in groups of 3 using an int (starting from 1) to designate which rules are combined.\\nUse operator ('and'|'or') to choose whether to join or separate each rule when searching.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rule arrays must contain the following:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule name (e.g. rule_1\", \"['title']\", \", rule_2\", \"['album']\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule operator (e.g. rule_1_operator\", \"[0]\", \", rule_2_operator\", \"[3]\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule input (e.g. rule_1_input\", \"['Prodigy']\", \", rule_2_input\", \"['Land']\", \")\")))), mdx(\"h4\", null, \"Available search rules\"), mdx(\"p\", null, \"Select the type of search based on the type of data you are searching for. (songs, playlists, etc)\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"rule_1\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Title\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Type\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Valid Items\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"anywhere\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Any searchable text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"title\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Title / Name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist,playlist,label\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"favorite\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Favorites\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song, album, artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"playlist_name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Playlist Name\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"album\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Album\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"artist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Artist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"composer\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Composer\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"comment\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Comment\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"label\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Label\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"lyrics\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Lyrics\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"tags\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"album_tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Album tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"tags\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"artist_tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Artist tag\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"tags\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"filename\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Filename\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,video\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"placeformed\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Place\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"username\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Username\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"user\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"year\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Year\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"time\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Length (in minutes)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"rating\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Rating (Average)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"myrating\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"My Rating\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"artistrating\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"My Rating (Artist)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"albumrating\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"My Rating (Album)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"played_times\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"# Played\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"bitrate\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Bitrate\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"has imageght\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Local Image\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"image height\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Image Height\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"image width\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Image Width\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"yearformed\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Year\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"played\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Played\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"myplayed\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Played by Me\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"myplayedartist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Played by Me (Artist)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"myplayedalbum\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Played by Me (Album)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"last_play\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"My Last Play\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"days\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"added\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Added\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"date\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"updated\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Updated\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"date\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"catalog\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Catalog\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"other_user\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Another User\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"user_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song,album,artist\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"other_user_album\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Another User\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"user_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"other_user_artist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Another User\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"user_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"playlist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Playlist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"licensing\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Music License\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean_numeric\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"smartplaylist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Smart Playlist\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean_subsearch\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"metadata\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Metadata\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"metadata (multiple types)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"song\")))), mdx(\"h4\", null, \"Available search operators\"), mdx(\"p\", null, \"Select your operator (integer only!) based on the type or your selected search\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"rule_1_operator\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Text / Tags / Metadata\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Numeric / user_numeric\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Date\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Boolean, Numeric, Subsearch / Days\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"0\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"contains\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is greater than or equal to / has loved\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"before\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is true / before (x) days ago\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not contain\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is less than or equal to / has rated 5 stars\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"after\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is false / after (x) days ago\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"starts with\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"equals / has rated 4 stars\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ends with\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not equal / has rated 3 stars\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is greater than / has rated 2 stars\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is not\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is less than / has rated 1 stars\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"6\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sounds like (Text Only)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not sound like (Text Only)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"8\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"matches regular expression (Text Only)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"9\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not match regular expression (Text Only)\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  })), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }))))), mdx(\"p\", null, \"Send the correct input based on the type of search.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"rule_1_input\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"integer\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"boolean\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOTE\"), \" To search metadata you need to add a 4th rule \\\"rule_X_subtype\\\"\\nOperators for metadata are using the text/tag types \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AND\"), \" numeric types in a single list as they can be ints/strings/dates.\\nCurrently there is not a simple way to identify what metadata types you have saved. New methods will be created for this.\"), mdx(\"h4\", null, \"Metadata operator table\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"rule_1_operator\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Metadata\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"contains\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not contain\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"starts with\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"ends with\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is not\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"6\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"sounds like (Text Only)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not sound like (Text Only)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"8\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"matches regular expression (Text Only)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"9\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"does not match regular expression (Text Only)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"10\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is greater than or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"11\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is less than or equal to\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"12\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"13\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is not\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"14\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is greater than\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"15\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"is less than\")))), mdx(\"p\", null, \"To search a mixed type like metadata you must search using 4 rules.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Search rule 1 for band containing 'Prodigy', Search Rule 2 for bbm > 120\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule name (e.g. rule_1\", \"['metadata']\", \", rule_2\", \"['metadata']\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule operator (e.g. rule_1_operator\", \"[0]\", \", rule_2_operator\", \"[12]\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule input (e.g. rule_1_input\", \"['Prodigy']\", \", rule_2_input\", \"['120']\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rule subtype (e.g. rule_1_subtype\", \"['4']\", \", rule_2_subtype\", \"['9']\", \")\")))), mdx(\"h4\", null, \"advanced_search parameters\"), mdx(\"p\", null, \"@param array $input\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"INPUTS\\n* ampache_url = (string)\\n* ampache_API = (string)\\n* operator = (string) 'and'|'or' (whether to match one rule or all)\\n* rules = (array) = [[rule_1,rule_1_operator,rule_1_input], [rule_2,rule_2_operator,rule_2_input], [etc]]\\n* type = (string) 'song', 'album', 'artist', 'playlist', 'label', 'user', 'video'\\n* offset = (integer)\\n* limit' = (integer)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#ampaches-xml-api","title":"Ampache's XML API","items":[{"url":"#sending-handshake-request","title":"Sending Handshake Request","items":[{"url":"#user--password","title":"User / Password"},{"url":"#api-key","title":"Api Key"},{"url":"#other-handshake-related-stuff","title":"Other handshake-related stuff","items":[{"url":"#ampache-sheme","title":"Ampache sheme"},{"url":"#application-name","title":"Application Name"},{"url":"#geolocation","title":"Geolocation"}]},{"url":"#result","title":"Result"}]},{"url":"#errors","title":"Errors"},{"url":"#methods","title":"Methods","items":[{"url":"#non-data-methods","title":"Non-Data Methods"},{"url":"#data-methods","title":"Data Methods"},{"url":"#control-methods","title":"Control Methods"}]},{"url":"#request-url-examples","title":"Request URL Examples","items":[{"url":"#requesting-all-genres-whose-name-starts-with-rock","title":"Requesting all genres whose name starts with Rock"},{"url":"#requesting-all-song-titles-with-an-offset-of-5000","title":"Requesting all song titles, with an offset of 5000"}]},{"url":"#advanced_search","title":"advanced_search","items":[{"url":"#changes-to-text-searches-for-410001","title":"Changes to text searches for 410001"},{"url":"#changes-to-text-searches-for-400001","title":"Changes to text searches for 400001"},{"url":"#using-advanced_search","title":"Using advanced_search","items":[{"url":"#available-search-rules","title":"Available search rules"},{"url":"#available-search-operators","title":"Available search operators"},{"url":"#metadata-operator-table","title":"Metadata operator table"},{"url":"#advanced_search-parameters","title":"advanced_search parameters"}]}]}]}]},"parent":{"__typename":"File","relativePath":"old-versions/api-4.1.0/1-pre-4.2.0.md"},"frontmatter":{"metaTitle":"API 4.1.0","metaDescription":"API documentation"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/api-advanced-search","title":"advanced_search"}}},{"node":{"fields":{"slug":"/api-xml-methods","title":"XML Methods"}}},{"node":{"fields":{"slug":"/","title":"Ampache API"}}},{"node":{"fields":{"slug":"/api-json-methods","title":"JSON Methods"}}},{"node":{"fields":{"slug":"/api-errors","title":"API Errors"}}},{"node":{"fields":{"slug":"/old-versions/api-4.1.0/api","title":"API 4.1.0"}}},{"node":{"fields":{"slug":"/old-versions/api-4.1.0/xml-methods","title":"XML 4.1.0"}}},{"node":{"fields":{"slug":"/api-standards","title":"API Standards"}}},{"node":{"fields":{"slug":"/old-versions/api-4.1.0/1-pre-4.2.0","title":"API 4.1.0"}}},{"node":{"fields":{"slug":"/old-versions","title":"Old Releases"}}},{"node":{"fields":{"slug":"/old-versions/api-4.1.0","title":"API 4.1.0"}}},{"node":{"fields":{"slug":"/api-examples","title":"API Examples"}}}]}},"pageContext":{"id":"97705ccc-8bb2-5f21-b9ad-c196f862edc3"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}